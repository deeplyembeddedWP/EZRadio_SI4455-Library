/************************************************************************************ 
MIT License
Copyright (c) 2017 DeeplyEmbedded
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--------------------------------------------------------------------------------------
This is a library for using the EZRadio SI4455 Wireless Transciever Chip with
NodeMCU. The library enables users to initialize and configure the Radio Chip to
either transmit or recieve data. For more details, please do refer the EZRadio 
SI4455 Application Guide by Silicon Labs. The following library was ported from the
example projects generated by WDS.
The radio configuration file was generated using WDS 3.2.11.0. The below is the
main configuration parameters that is supported by the configuration file -->
1. Base Frequency:433 MHz
2. GPIO 0:INPUT - Pull Up Disabled
3. GPIO 1:RX_DATA
Below is connections between the NodeMCU and EZRadio SI4455
  		
		NodeMCU			EZRadio SI4455
		-------			--------------
		HSCLK			     SCLK
		HMISO			     SDO
		HMOSI			     SDI
       		HCS			     NSEL
		GPIO 4			     SDN
		GND			     GND			    
Written by Vinay Divakar, January 22nd 2017  
************************************************************************************/

/* Lib's Include */
#include <SPI.h>
#include "Si4455_radio_config.h"

/* Definitions for EZRadio SI4455 - Tranciever Chip */
#define Si4455ChipReadyPend                     (Si4455Cmd.GET_INT_STATUS.PH_PEND << 2) & 0x01
#define Si4455CmdErrPend                        (Si4455Cmd.GET_INT_STATUS.PH_PEND << 3) & 0x01
#define Si4455StateChangePend                   (Si4455Cmd.GET_INT_STATUS.PH_PEND << 4) & 0x01
#define Si4455FifoUnderflowOverflowErrorPend    (Si4455Cmd.GET_INT_STATUS.PH_PEND << 5) & 0x01
#define Si4455CalPend                           (Si4455Cmd.GET_INT_STATUS.PH_PEND << 6) & 0x01

#define Si4455SyncDetectPend                    Si4455Cmd.GET_INT_STATUS.MODEM_PEND & 0x01
#define Si4455PreambleDetectPend                (Si4455Cmd.GET_INT_STATUS.MODEM_PEND << 1) & 0x01
#define Si4455InvalidPreamblePend               (Si4455Cmd.GET_INT_STATUS.MODEM_PEND << 2) & 0x01
#define Si4455RssiPend                          (Si4455Cmd.GET_INT_STATUS.MODEM_PEND << 3) & 0x01
#define Si4455RssiJumpPend                      (Si4455Cmd.GET_INT_STATUS.MODEM_PEND << 4) & 0x01
#define Si4455InvalidSyncPend                   (Si4455Cmd.GET_INT_STATUS.MODEM_PEND << 5) & 0x01
#define Si4455PostambleDetectPend               (Si4455Cmd.GET_INT_STATUS.MODEM_PEND << 6) & 0x01

#define Si4455RxFifoAlmostFullPend              Si4455Cmd.GET_INT_STATUS.CHIP_PEND & 0x01
#define Si4455TxFifoAlmostEmptyPend             (Si4455Cmd.GET_INT_STATUS.CHIP_PEND << 1) & 0x01
#define Si4455Crc32ErrorPend                    (Si4455Cmd.GET_INT_STATUS.CHIP_PEND << 3) & 0x01
#define Si4455PacketRxPend                      (Si4455Cmd.GET_INT_STATUS.CHIP_PEND << 4) & 0x01
#define Si4455PacketSentPend                    (Si4455Cmd.GET_INT_STATUS.CHIP_PEND << 5) & 0x01

/* Structure for accessing parameters from config file */
typedef struct
{
	const unsigned char   *Radio_ConfigurationArray;
	unsigned char   Radio_ChannelNumber;
	unsigned char   Radio_PacketLength;
	unsigned char   Radio_State_After_Power_Up;
	unsigned int  Radio_Delay_Cnt_After_Reset;
} tRadioConfiguration;

/* enum to return status of the radio chip */
typedef enum
{
	SI4455_SUCCESS,
	SI4455_NO_PATCH,
	SI4455_CTS_TIMEOUT,
	SI4455_PATCH_FAIL,
	SI4455_COMMAND_ERROR,
	SI4455_FAIL
}Si4455_T;

class EZRadio_Si4455
{
public: 
	/* Driver functions for radio chip */
	void Wait_POR();
	void SpiWriteBytes(unsigned char byteCount, const unsigned char* pData);
	void SpiReadBytes(unsigned char byteCount, unsigned char* pData);
	unsigned char GetResponse_CTS(unsigned char byteCount, unsigned char* pData);
	unsigned char PollCTS();
	void SendCmdArgs(unsigned char cmd, unsigned char pollcts, unsigned char bytecount, const unsigned char *pData);
	void WriteEZConfigArray(unsigned char numBytes, const unsigned char* pEzConfigArray);
	void SendCmds(unsigned char ByteCount, unsigned char* pData);
	unsigned char SendCmdGetResp(unsigned char cmdByteCount, unsigned char *pCmdData, unsigned char respByteCount, unsigned char* pRespData);
	void GetIntStatus(unsigned char PH_CLR_PEND, unsigned char MODEM_CLR_PEND, unsigned char CHIP_CLR_PEND);
	unsigned char Si4455_Configure(const unsigned char *pSetPropCmd);
	void Radio_PowerUp();
	Si4455_T Si4455_HWInitialize();
	void StartRX(unsigned char CHANNEL, unsigned char CONDITION, unsigned int RX_LEN, unsigned char NEXT_STATE1, unsigned char NEXT_STATE2, unsigned char NEXT_STATE3);
	void Radio_StartRx();
	void StartTX(unsigned char CHANNEL, unsigned char CONDITION, unsigned int TX_LEN);
	void StartTx(unsigned char *pioFixRadioPacket);
	void SPI_SI4455_Init();
	void SPI_Init();
};


